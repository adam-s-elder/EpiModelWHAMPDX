pdap.prop = list(name = "prop.neg.pdap",
sec_title = "Proportion of HIV negatives",
plot_name = "Proportion on PDAP",
plot_cap = "Among HIV - individuals",
plot_ylab = "Proportion",
plt_type = "line",
vars = c("num.pdap.", "num.", "i.num."),
sum_fun = function(x, y, z) { x / (y - z) }
)
)
print_many_plots(num.on.pdap, targ_df = cur_targs, num_hash = 3)
hiv.diagnosis <- list(
undx.frac = list(name = "undx.hivposfrac",
sec_title = "Undiagnosed fraction",
# plot_name = "Number of undiagnosed HIV + individuals / number of HIV+ individuals",
plot_name = "Undiagnosed fraction",
plot_ylab = "Proportion",
plot_cap = "Among HIV individuals",
plt_type = "line",
vars = c("num.undx.", "i.num."),
sum_fun = function(x, y) x / y)
)
print_many_plots(hiv.diagnosis, targ_df = targ_df)
suppressPackageStartupMessages(library(tidyverse))
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, fig.width = 8)
sim_dat <- readRDS("../../EpiModel/AE/sim_epimodel3/sim_on_2021-04-21_at_2033.rds")
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(EpiModelWHAMPDX)
print_many_plots <- function(testing_plots, num_hash = 3,
targ_df = EpiModelWHAMPDX::WHAMP.targs){
big_temp <- paste0(c(rep("#", num_hash),
" %s {.tabset .tabset-fade .tabset-pills} ", "
", "
"), collapse = "")
sml_temp <- paste0(c("\n\n", rep("#", num_hash + 1), " %s ", "
", "
"), collapse = "")
for (ms_idx in 1:length(testing_plots)) {
sub_plot_info <- testing_plots[[ms_idx]]
if (is.null(sub_plot_info$plt_type)) {
plt_type <- "line"
}else{plt_type <- sub_plot_info$plt_type}
meas_data <- make_epi_plot_data(sim_dat, sub_plot_info)
if (!is.null(sub_plot_info$sec_title)) {
this_meas_name <- sub_plot_info$sec_title
}else{
this_meas_name <- sub_plot_info$plot_name
}
cat(sprintf(big_temp, this_meas_name))
this_targ <- targ_df %>%
filter(sub_plot_info$name == measure)
attrs_present <- unique(meas_data$epi_data$cat_name)
for (ct_idx in seq(attrs_present)) {
this_cat <- names(attr_names)[ct_idx]
cat(sprintf(sml_temp, this_cat))
print(#EpiModelWHAMPDX::plot_epi(
plot_epi(
meas_data, this_cat, this_targ,
plot_type = plt_type, year_range = c(1980, 2030)))
cat("\n\n")
}
}
}
targ_df <- readRDS("../../Data/EpiModelSims/WHAMP.dx.targs.rds")
make_simp_plot <- function(dat, epi_names, ptype = "line",
minyear = 1980){
num_vars <- length(epi_names)
tidy_df <- data.frame("Year" = c(), "Variable" = c(),
"Value" = c())
for (var_idx in 1:num_vars) {
this_dat <- dat$epi[[1]][[epi_names[var_idx]]]
this_dat <- this_dat[-(1:dat$control$start)]
time_var <- seq_along(this_dat) / 52 + dat$control$year_start
num_vals <- length(this_dat)
add_df <- data.frame("Year" = time_var,
"Variable" = rep(epi_names[var_idx]), num_vals,
"Value" = this_dat)
tidy_df <- bind_rows(tidy_df, add_df)
}
tidy_df <- tidy_df[complete.cases(tidy_df), ]
target_year <- max(dat$param$demog_match_arrival_df$entry_year)
if (ptype == "line"){
ggplot(tidy_df) + geom_line(aes(x = Year, y = Value, color = Variable)) +
geom_vline(xintercept = target_year) +
theme_minimal() + coord_cartesian(xlim = c(minyear, NA))
} else {
ggplot(tidy_df) +
geom_smooth(aes(x = Year, y = Value, color = Variable), se = FALSE) +
geom_vline(xintercept = target_year) +
theme_minimal() + coord_cartesian(xlim = c(minyear, NA))
}
}
make_diag_plots <- function(dat){
mean_age <- make_simp_plot(dat, c("age.mean.ovr", "age.mean.B",
"age.mean.H", "age.mean.O"))
race_nums <- make_simp_plot(dat, c("num.B", "num.H", "num.O")) +
scale_y_log10()
inf_race_nums <- make_simp_plot(dat, c("i.num.B", "i.num.H", "i.num.O"))
pt <- WApopdata::pop.totals
pt$pop.hbo.pos$hbo <- pt$pop.hbo.pos$hbo %>% replace_na("H")
props <- left_join(pt$pop.hbo.pos, pt$pop.hbo.all, by = "hbo") %>%
mutate("prop_pop_totals" = Freq.x / Freq.y)
ego_props <- WHAMPData::whampArtnetWA_egodata$main$egos %>%
# filter(!is.na(deg.main)) %>%
group_by(race) %>%
summarise("prop_eg_dat" = sum(hiv * ego.wawt) / sum(ego.wawt)) %>%
select("hbo" = "race", "prop_egodat" = "prop_eg_dat")
all_props <- left_join(props, ego_props, by = "hbo") %>%
select("hbo", "ego_dat" = "prop_egodat",
"pop_totals" = "prop_pop_totals") %>%
pivot_longer(cols = -hbo, names_to = "source")
nums <- dat$epi[[1]][c("num.H", "num.B", "num.O")] %>% sapply("[", 1)
names(nums) <- gsub(pattern = ".O", replacement = ".O", x = names(nums))
num_df <- data.frame("hbo" = factor(gsub("num.", "", names(nums))),
"num" = nums)
all_inf <- left_join(all_props, num_df, by = "hbo") %>%
mutate(exp_num = value * num)
all_inf$hbo <- gsub("O", "O", all_inf$hbo)
all_inf$Variable <- paste0("i.num.", all_inf$hbo)
hiv_est <- WApopdata::msm.pop.totals_2019$pop.race.pos %>%
select(race, low = prev_lb, high = prev_ub) %>%
mutate(Variable = paste0("i.prev.", race))
hiv_est$Variable <- gsub(".O", ".O", hiv_est$Variable)
hiv_est <- rbind(
cbind(hiv_est, "x" = dat$control$year_start),
cbind(hiv_est, "x" = dat$control$nsteps / 52 +
dat$control$year_start)
)
if (all(c(dat$epi$i.num.O, dat$epi$i.num.B, dat$epi$i.num.H) > 0)) {
inf_race_nums <- inf_race_nums +
geom_hline(data = all_inf,
aes(yintercept = exp_num,
linetype = source,
color = Variable)) +
scale_y_log10()
}
# dat$epi[[1]]$
all_inf$new_var <- gsub("num", "prev", all_inf$Variable)
prev_race_nums <- make_simp_plot(dat,
c("i.prev.B", "i.prev.H", "i.prev.O")) +
geom_ribbon(data = hiv_est,
aes(fill = Variable, x = x, ymin = low, ymax = high),
alpha = 0.3) +
# geom_hline(data = all_inf,
#            aes(yintercept = value,
#                linetype = source,
#                color = new_var)) +
ylab("Prevalence")
diag_race_nums <- make_simp_plot(
dat, c("i.prev.dx.B", "i.prev.dx.H", "i.prev.dx.W")
)
inc_race_nums <- make_simp_plot(
dat, c("incid.B", "incid.H", "incid.W"), ptype = "smooth"
)
tot_tests_race_nums <- make_simp_plot(
dat, c("tot.tests.B", "tot.tests.H", "tot.tests.O")
)
new_dx <- make_simp_plot(
dat, c("newDx45", "newDx140", "newDx200", "newDx2y"),
ptype = "smooth"
)
mean_tx <- make_simp_plot(
dat, c("mean.tx.on", "mean.tx.off",
"mean.tx.on.part", "mean.tx.off.part")
)
aids_nums <- make_simp_plot(
dat, c("new.aids.tot", "new.aids.part", "new.aids.full"),
ptype = "smooth"
)
targets <- data.frame(
"Variable" = c("n_el.main", "n_el.casl", "n_el.inst"),
"target" = c(
dat$nwparam[[1]]$target.stats[1],
dat$nwparam[[2]]$target.stats[1],
dat$nwparam[[3]]$target.stats[1]
)
)
netstats_counts <- make_simp_plot(
dat, c("n_el.main", "n_el.casl", "n_el.inst")
) + geom_hline(data = targets,
aes(yintercept = target,
color = Variable)) +
scale_y_log10()
oth_vars <- make_simp_plot(
dat, c("dep.gen", "dep.AIDS", "dep.HIV",
"dep.HIV.old", "nNew",  "tot.tests.nprep",
"tot.neg.tests")
) + facet_wrap(~ Variable, scales = "free") +
theme(legend.position = "none")
all_diag_plots <- list(
"Race_Counts" = list(
name = "Number of individuals of each race",
plot = race_nums
),
"mean_age" = list(
name = "Mean age accross races",
plot = mean_age
),
"inf_race_num" = list(
name = "Number infected accross races",
plot = inf_race_nums
),
"prev_race_num" = list(
name = "Proportion infected accross races",
plot = prev_race_nums
),
"diag_race_nums" = list(
name = "Number diagnosed accross races",
plot = diag_race_nums
),
"inc_race_nums" = list(
name = "Incident counts accross races",
plot = inc_race_nums
),
"tot_tests_race_nums" = list(
name = "Total tests accross races",
plot = tot_tests_race_nums
),
"new_dx" = list(
name = "Newly Diagnosed",
plot = new_dx
),
"mean_tx" = list(
name = "Mean time on treatment (in weeks)",
plot = mean_tx
),
"aids_nums" = list(
name = "Aids Information",
plot = aids_nums
),
"netstats_counts" = list(
name = "Number of ties in each network",
plot = netstats_counts
),
"oth_vars" = list(
name = "Other variables",
plot = oth_vars
)
)
return(all_diag_plots)
}
my_plots <- make_diag_plots(sim_dat)
# saveRDS(my_plots, file = "diag_plots.rds")
this_data <- my_plots
print_many_plots <- function(testing_plots, num_hash = 3,
targ_df = EpiModelWHAMPDX::WHAMP.targs){
big_temp <- paste0(c(rep("#", num_hash),
" %s {.tabset .tabset-fade .tabset-pills} ", "
", "
"), collapse = "")
sml_temp <- paste0(c("\n\n", rep("#", num_hash + 1), " %s ", "
", "
"), collapse = "")
for (ms_idx in 1:length(testing_plots)) {
sub_plot_info <- testing_plots[[ms_idx]]
if (is.null(sub_plot_info$plt_type)) {
plt_type <- "line"
}else{plt_type <- sub_plot_info$plt_type}
meas_data <- make_epi_plot_data(sim_dat, sub_plot_info)
if (!is.null(sub_plot_info$sec_title)) {
this_meas_name <- sub_plot_info$sec_title
}else{
this_meas_name <- sub_plot_info$plot_name
}
cat(sprintf(big_temp, this_meas_name))
this_targ <- targ_df %>%
filter(sub_plot_info$name == measure)
attrs_present <- unique(meas_data$epi_data$cat_name)
for (ct_idx in seq(attrs_present)) {
this_cat <- names(attr_names)[ct_idx]
cat(sprintf(sml_temp, this_cat))
print(#EpiModelWHAMPDX::plot_epi(
plot_epi(
meas_data, this_cat, this_targ,
plot_type = plt_type, year_range = c(1980, 2030)))
cat("\n\n")
}
}
}
targ_df <- readRDS("../../Data/EpiModelSims/WHAMP.dx.targs.rds")
make_simp_plot <- function(dat, epi_names, ptype = "line",
minyear = 1980){
num_vars <- length(epi_names)
tidy_df <- data.frame("Year" = c(), "Variable" = c(),
"Value" = c())
for (var_idx in 1:num_vars) {
this_dat <- dat$epi[[1]][[epi_names[var_idx]]]
this_dat <- this_dat[-(1:dat$control$start)]
time_var <- seq_along(this_dat) / 52 + dat$control$year_start
num_vals <- length(this_dat)
add_df <- data.frame("Year" = time_var,
"Variable" = rep(epi_names[var_idx]), num_vals,
"Value" = this_dat)
tidy_df <- bind_rows(tidy_df, add_df)
}
tidy_df <- tidy_df[complete.cases(tidy_df), ]
target_year <- max(dat$param$demog_match_arrival_df$entry_year)
if (ptype == "line"){
ggplot(tidy_df) + geom_line(aes(x = Year, y = Value, color = Variable)) +
geom_vline(xintercept = target_year) +
theme_minimal() + coord_cartesian(xlim = c(minyear, NA))
} else {
ggplot(tidy_df) +
geom_smooth(aes(x = Year, y = Value, color = Variable), se = FALSE) +
geom_vline(xintercept = target_year) +
theme_minimal() + coord_cartesian(xlim = c(minyear, NA))
}
}
make_diag_plots <- function(dat){
mean_age <- make_simp_plot(dat, c("age.mean.ovr", "age.mean.B",
"age.mean.H", "age.mean.O"))
race_nums <- make_simp_plot(dat, c("num.B", "num.H", "num.O")) +
scale_y_log10()
inf_race_nums <- make_simp_plot(dat, c("i.num.B", "i.num.H", "i.num.O"))
pt <- WApopdata::pop.totals
pt$pop.hbo.pos$hbo <- pt$pop.hbo.pos$hbo %>% replace_na("H")
props <- left_join(pt$pop.hbo.pos, pt$pop.hbo.all, by = "hbo") %>%
mutate("prop_pop_totals" = Freq.x / Freq.y)
ego_props <- WHAMPData::whampArtnetWA_egodata$main$egos %>%
# filter(!is.na(deg.main)) %>%
group_by(race) %>%
summarise("prop_eg_dat" = sum(hiv * ego.wawt) / sum(ego.wawt)) %>%
select("hbo" = "race", "prop_egodat" = "prop_eg_dat")
all_props <- left_join(props, ego_props, by = "hbo") %>%
select("hbo", "ego_dat" = "prop_egodat",
"pop_totals" = "prop_pop_totals") %>%
pivot_longer(cols = -hbo, names_to = "source")
nums <- dat$epi[[1]][c("num.H", "num.B", "num.O")] %>% sapply("[", 1)
names(nums) <- gsub(pattern = ".O", replacement = ".O", x = names(nums))
num_df <- data.frame("hbo" = factor(gsub("num.", "", names(nums))),
"num" = nums)
all_inf <- left_join(all_props, num_df, by = "hbo") %>%
mutate(exp_num = value * num)
all_inf$hbo <- gsub("O", "O", all_inf$hbo)
all_inf$Variable <- paste0("i.num.", all_inf$hbo)
hiv_est <- WApopdata::msm.pop.totals_2019$pop.race.pos %>%
select(race, low = prev_lb, high = prev_ub) %>%
mutate(Variable = paste0("i.prev.", race))
hiv_est$Variable <- gsub(".O", ".O", hiv_est$Variable)
hiv_est <- rbind(
cbind(hiv_est, "x" = dat$control$year_start),
cbind(hiv_est, "x" = dat$control$nsteps / 52 +
dat$control$year_start)
)
if (all(c(dat$epi$i.num.O, dat$epi$i.num.B, dat$epi$i.num.H) > 0)) {
inf_race_nums <- inf_race_nums +
geom_hline(data = all_inf,
aes(yintercept = exp_num,
linetype = source,
color = Variable)) +
scale_y_log10()
}
# dat$epi[[1]]$
all_inf$new_var <- gsub("num", "prev", all_inf$Variable)
prev_race_nums <- make_simp_plot(dat,
c("i.prev.B", "i.prev.H", "i.prev.O")) +
geom_ribbon(data = hiv_est,
aes(fill = Variable, x = x, ymin = low, ymax = high),
alpha = 0.3) +
# geom_hline(data = all_inf,
#            aes(yintercept = value,
#                linetype = source,
#                color = new_var)) +
ylab("Prevalence")
diag_race_nums <- make_simp_plot(
dat, c("i.prev.dx.B", "i.prev.dx.H", "i.prev.dx.W")
)
inc_race_nums <- make_simp_plot(
dat, c("incid.B", "incid.H", "incid.W"), ptype = "smooth"
)
tot_tests_race_nums <- make_simp_plot(
dat, c("tot.tests.B", "tot.tests.H", "tot.tests.O")
)
new_dx <- make_simp_plot(
dat, c("newDx45", "newDx140", "newDx200", "newDx2y"),
ptype = "smooth"
)
mean_tx <- make_simp_plot(
dat, c("mean.tx.on", "mean.tx.off",
"mean.tx.on.part", "mean.tx.off.part")
)
aids_nums <- make_simp_plot(
dat, c("new.aids.tot", "new.aids.part", "new.aids.full"),
ptype = "smooth"
)
targets <- data.frame(
"Variable" = c("n_el.main", "n_el.casl", "n_el.inst"),
"target" = c(
dat$nwparam[[1]]$target.stats[1],
dat$nwparam[[2]]$target.stats[1],
dat$nwparam[[3]]$target.stats[1]
)
)
netstats_counts <- make_simp_plot(
dat, c("n_el.main", "n_el.casl", "n_el.inst")
) + geom_hline(data = targets,
aes(yintercept = target,
color = Variable)) +
scale_y_log10()
oth_vars <- make_simp_plot(
dat, c("dep.gen", "dep.AIDS", "dep.HIV",
"dep.HIV.old", "nNew",  "tot.tests.nprep",
"tot.neg.tests")
) + facet_wrap(~ Variable, scales = "free") +
theme(legend.position = "none")
all_diag_plots <- list(
"Race_Counts" = list(
name = "Number of individuals of each race",
plot = race_nums
),
"mean_age" = list(
name = "Mean age accross races",
plot = mean_age
),
"inf_race_num" = list(
name = "Number infected accross races",
plot = inf_race_nums
),
"prev_race_num" = list(
name = "Proportion infected accross races",
plot = prev_race_nums
),
"diag_race_nums" = list(
name = "Number diagnosed accross races",
plot = diag_race_nums
),
"inc_race_nums" = list(
name = "Incident counts accross races",
plot = inc_race_nums
),
"tot_tests_race_nums" = list(
name = "Total tests accross races",
plot = tot_tests_race_nums
),
"new_dx" = list(
name = "Newly Diagnosed",
plot = new_dx
),
"mean_tx" = list(
name = "Mean time on treatment (in weeks)",
plot = mean_tx
),
"aids_nums" = list(
name = "Aids Information",
plot = aids_nums
),
"netstats_counts" = list(
name = "Number of ties in each network",
plot = netstats_counts
),
"oth_vars" = list(
name = "Other variables",
plot = oth_vars
)
)
return(all_diag_plots)
}
my_plots <- make_diag_plots(sim_dat)
# saveRDS(my_plots, file = "diag_plots.rds")
this_data <- my_plots
num.on.pdap <- list(
pdap.num = list(name = "num.pdap",
sec_title = "Number",
plot_name = "Number in PDAP",
plot_cap = "Among individuals taking PrEP",
plot_ylab = "Count",
plt_type = "line",
vars = c("num.pdap."),
sum_fun = function(x) { x }
),
pdap.prop = list(name = "prop.pdap",
sec_title = "Proportion of those on PrEP",
plot_name = "Proportion on PDAP",
plot_cap = "Among individuals taking PrEP",
plot_ylab = "Proportion",
plt_type = "line",
vars = c("num.pdap.", "neg.prep.num."),
sum_fun = function(x, y) { x / y }
),
pdap.prop = list(name = "prop.neg.pdap",
sec_title = "Proportion of HIV negatives",
plot_name = "Proportion on PDAP",
plot_cap = "Among HIV - individuals",
plot_ylab = "Proportion",
plt_type = "line",
vars = c("num.pdap.", "num.", "i.num."),
sum_fun = function(x, y, z) { x / (y - z) }
)
)
print_many_plots(num.on.pdap, targ_df = cur_targs, num_hash = 3)
attr_names$insurance <- NULL
print_many_plots(num.on.pdap, targ_df = cur_targs, num_hash = 3)
attr_names
attr_names <- list(
"ovr" = c(ovr = "Overall"),
"race" = c(H = "Hispanic", B = "Black", O = "Other"),
"region" = c(EasternWA = "Eastern Washington",
WesternWA = "Western Washington",
King = "King County"),
"age.grp" = c("1" = "15-24", "2" = "25-34", "3" = "35-44",
"4" = "45-54", "5" = "55-65", "6" = "66+"),
"snap5" = c("sn0" = "SNAP 0", "sn1" = "SNAP 1", "sn2" = "SNAP 2",
"sn3" = "SNAP 3", "sn4" = "SNAP 4", "sn5" = "SNAP 5")#,
# "insurance" = c("employer" = "Employer", "individual" = "Individual",
#                 "medicaid" = "Medicade", "medicare" = "Medicare",
#                 "none" = "None", "wship" = "WSHIP")
)
usethis::use_data(attr_names, overwrite = TRUE)
setwd("~/EpiModelWHAMPDX/inst")
usethis::use_data(attr_names, overwrite = TRUE)
